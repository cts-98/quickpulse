# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import messagequeue_pb2 as messagequeue__pb2


class MessageQueueStub(object):
    """The MessageQueue service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Produce = channel.unary_unary(
                '/messagequeue.MessageQueue/Produce',
                request_serializer=messagequeue__pb2.ProduceRequest.SerializeToString,
                response_deserializer=messagequeue__pb2.ProduceResponse.FromString,
                )
        self.Consume = channel.unary_unary(
                '/messagequeue.MessageQueue/Consume',
                request_serializer=messagequeue__pb2.ConsumeRequest.SerializeToString,
                response_deserializer=messagequeue__pb2.ConsumeResponse.FromString,
                )
        self.StreamMessages = channel.stream_stream(
                '/messagequeue.MessageQueue/StreamMessages',
                request_serializer=messagequeue__pb2.StreamMessage.SerializeToString,
                response_deserializer=messagequeue__pb2.StreamMessage.FromString,
                )


class MessageQueueServicer(object):
    """The MessageQueue service definition.
    """

    def Produce(self, request, context):
        """Produce a message to the queue.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Consume(self, request, context):
        """Consume a message from the queue.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamMessages(self, request_iterator, context):
        """Bidirectional streaming for messages.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessageQueueServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Produce': grpc.unary_unary_rpc_method_handler(
                    servicer.Produce,
                    request_deserializer=messagequeue__pb2.ProduceRequest.FromString,
                    response_serializer=messagequeue__pb2.ProduceResponse.SerializeToString,
            ),
            'Consume': grpc.unary_unary_rpc_method_handler(
                    servicer.Consume,
                    request_deserializer=messagequeue__pb2.ConsumeRequest.FromString,
                    response_serializer=messagequeue__pb2.ConsumeResponse.SerializeToString,
            ),
            'StreamMessages': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamMessages,
                    request_deserializer=messagequeue__pb2.StreamMessage.FromString,
                    response_serializer=messagequeue__pb2.StreamMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'messagequeue.MessageQueue', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MessageQueue(object):
    """The MessageQueue service definition.
    """

    @staticmethod
    def Produce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messagequeue.MessageQueue/Produce',
            messagequeue__pb2.ProduceRequest.SerializeToString,
            messagequeue__pb2.ProduceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Consume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messagequeue.MessageQueue/Consume',
            messagequeue__pb2.ConsumeRequest.SerializeToString,
            messagequeue__pb2.ConsumeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamMessages(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/messagequeue.MessageQueue/StreamMessages',
            messagequeue__pb2.StreamMessage.SerializeToString,
            messagequeue__pb2.StreamMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
