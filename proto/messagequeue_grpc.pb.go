// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: messagequeue.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MessageQueue_Produce_FullMethodName        = "/messagequeue.MessageQueue/Produce"
	MessageQueue_Consume_FullMethodName        = "/messagequeue.MessageQueue/Consume"
	MessageQueue_StreamMessages_FullMethodName = "/messagequeue.MessageQueue/StreamMessages"
)

// MessageQueueClient is the client API for MessageQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The MessageQueue service definition.
type MessageQueueClient interface {
	// Produce a message to the queue.
	Produce(ctx context.Context, in *ProduceRequest, opts ...grpc.CallOption) (*ProduceResponse, error)
	// Consume a message from the queue.
	Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*ConsumeResponse, error)
	// Bidirectional streaming for messages.
	StreamMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamMessage, StreamMessage], error)
}

type messageQueueClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageQueueClient(cc grpc.ClientConnInterface) MessageQueueClient {
	return &messageQueueClient{cc}
}

func (c *messageQueueClient) Produce(ctx context.Context, in *ProduceRequest, opts ...grpc.CallOption) (*ProduceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProduceResponse)
	err := c.cc.Invoke(ctx, MessageQueue_Produce_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageQueueClient) Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*ConsumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsumeResponse)
	err := c.cc.Invoke(ctx, MessageQueue_Consume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageQueueClient) StreamMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamMessage, StreamMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MessageQueue_ServiceDesc.Streams[0], MessageQueue_StreamMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamMessage, StreamMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageQueue_StreamMessagesClient = grpc.BidiStreamingClient[StreamMessage, StreamMessage]

// MessageQueueServer is the server API for MessageQueue service.
// All implementations must embed UnimplementedMessageQueueServer
// for forward compatibility.
//
// The MessageQueue service definition.
type MessageQueueServer interface {
	// Produce a message to the queue.
	Produce(context.Context, *ProduceRequest) (*ProduceResponse, error)
	// Consume a message from the queue.
	Consume(context.Context, *ConsumeRequest) (*ConsumeResponse, error)
	// Bidirectional streaming for messages.
	StreamMessages(grpc.BidiStreamingServer[StreamMessage, StreamMessage]) error
	mustEmbedUnimplementedMessageQueueServer()
}

// UnimplementedMessageQueueServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessageQueueServer struct{}

func (UnimplementedMessageQueueServer) Produce(context.Context, *ProduceRequest) (*ProduceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Produce not implemented")
}
func (UnimplementedMessageQueueServer) Consume(context.Context, *ConsumeRequest) (*ConsumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Consume not implemented")
}
func (UnimplementedMessageQueueServer) StreamMessages(grpc.BidiStreamingServer[StreamMessage, StreamMessage]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedMessageQueueServer) mustEmbedUnimplementedMessageQueueServer() {}
func (UnimplementedMessageQueueServer) testEmbeddedByValue()                      {}

// UnsafeMessageQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageQueueServer will
// result in compilation errors.
type UnsafeMessageQueueServer interface {
	mustEmbedUnimplementedMessageQueueServer()
}

func RegisterMessageQueueServer(s grpc.ServiceRegistrar, srv MessageQueueServer) {
	// If the following call pancis, it indicates UnimplementedMessageQueueServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MessageQueue_ServiceDesc, srv)
}

func _MessageQueue_Produce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageQueueServer).Produce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageQueue_Produce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageQueueServer).Produce(ctx, req.(*ProduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageQueue_Consume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageQueueServer).Consume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageQueue_Consume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageQueueServer).Consume(ctx, req.(*ConsumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageQueue_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageQueueServer).StreamMessages(&grpc.GenericServerStream[StreamMessage, StreamMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageQueue_StreamMessagesServer = grpc.BidiStreamingServer[StreamMessage, StreamMessage]

// MessageQueue_ServiceDesc is the grpc.ServiceDesc for MessageQueue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageQueue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messagequeue.MessageQueue",
	HandlerType: (*MessageQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Produce",
			Handler:    _MessageQueue_Produce_Handler,
		},
		{
			MethodName: "Consume",
			Handler:    _MessageQueue_Consume_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessages",
			Handler:       _MessageQueue_StreamMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "messagequeue.proto",
}
